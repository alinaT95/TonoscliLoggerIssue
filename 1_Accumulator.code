.version sol 0.69.0

.macro constructor
DROP
GETGLOB 2
ISNULL
IFREF {
	CALL $c4_to_c7_with_init_storage$
}
GETGLOB 6
THROWIF 51
ENDS
.loc 1_Accumulator.sol, 12
GETGLOB 2
THROWIFNOT 101
.loc 1_Accumulator.sol, 14
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
GETGLOB 2
EQUAL
THROWIFNOT 102
.loc 1_Accumulator.sol, 15
ACCEPT
.loc 1_Accumulator.sol, 0
CALLREF {
	CALL $c7_to_c4$
}
THROW 0

.macro add
DROP
GETGLOB 6
THROWIFNOT 76
GETGLOB 2
ISNULL
IFREF {
	CALL $c4_to_c7$
}
.loc 1_Accumulator.sol, 20
LDU 256
ENDS
.loc 1_Accumulator.sol, 0
CALLREF {
	CALL $add_1003e2d2_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
THROW 0

.globl	add_1003e2d2_internal
.type	add_1003e2d2_internal, @function
CALL $add_1003e2d2_internal_macro$

.macro add_1003e2d2_internal_macro
.loc 1_Accumulator.sol, 22
ACCEPT
.loc 1_Accumulator.sol, 23
GETGLOB 10
ADD
DUP
SETGLOB 10
.loc 1_Accumulator.sol, 24
PUSHSLICE xc00000000000000000000000006467ff10
NEWC
STSLICE
STU 256
ENDC
PUSHINT 0
SENDRAWMSG
.loc 1_Accumulator.sol, 0

.macro reset
DROP
GETGLOB 6
THROWIFNOT 76
GETGLOB 2
ISNULL
IFREF {
	CALL $c4_to_c7$
}
.loc 1_Accumulator.sol, 27
ENDS
.loc 1_Accumulator.sol, 0
CALLREF {
	CALL $reset_d826f88f_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
THROW 0

.globl	reset_d826f88f_internal
.type	reset_d826f88f_internal, @function
CALL $reset_d826f88f_internal_macro$

.macro reset_d826f88f_internal_macro
.loc 1_Accumulator.sol, 28
THROW 788
.loc 1_Accumulator.sol, 0

.macro getSum
DROP
GETGLOB 6
THROWIFNOT 76
GETGLOB 2
ISNULL
IFREF {
	CALL $c4_to_c7$
}
.loc 1_Accumulator.sol, 33
ENDS
.loc 1_Accumulator.sol, 0
CALLREF {
	CALL $getSum_569c5f6d_internal_macro$
}
OVER
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 2373494970
	STUR 130
	STU 256
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	DROP
}
IFELSE
CALLREF {
	CALL $c7_to_c4$
}
THROW 0

.globl	getSum_569c5f6d_internal
.type	getSum_569c5f6d_internal, @function
CALL $getSum_569c5f6d_internal_macro$

.macro getSum_569c5f6d_internal_macro
.loc 1_Accumulator.sol, 34
ACCEPT
.loc 1_Accumulator.sol, 35
GETGLOB 10
.loc 1_Accumulator.sol, 0

.macro c4_to_c7
PUSHROOT
CTOS
LDU 256 ; pubkey c4
LDU 64 ; pubkey timestamp c4
LDU 1 ; ctor flag
NIP
LDU 256
ENDS
SETGLOB 10
SETGLOB 3
SETGLOB 2

.macro c4_to_c7_with_init_storage
PUSHROOT
CTOS
SBITS
GTINT 1
PUSHCONT {
	PUSHINT 0
	PUSHROOT
	CTOS
	PLDDICT ; D
	PUSHINT 0
	SETGLOB 10
	PUSHINT 64
	DICTUGET
	THROWIFNOT 61
	PLDU 256
	SETGLOB 2
	PUSHINT 0 ; timestamp
	SETGLOB 3
	PUSHINT 2
	SETGLOB 10
}
IFREFELSE {
	CALL $c4_to_c7$
}

.macro c7_to_c4
GETGLOB 10
GETGLOB 3
GETGLOB 2
NEWC
STU 256
STU 64
STONE
STU 256
ENDC
POPROOT

.macro upd_only_time_in_c4
PUSHROOT
CTOS
LDU 256
LDU 64
NIP
GETGLOB 3
ROT
NEWC
STU 256
STU 64
STSLICE
ENDC
POPROOT

.internal-alias :main_internal, 0
.internal :main_internal
PUSHROOT
CTOS
SBITS
NEQINT 1
SETGLOB 6
PUSH S2
CTOS
PLDU 4
MODPOW2 1
IFRET
OVER
SEMPTY ; isEmpty
IFJMPREF {
	GETGLOB 6
	THROWIFNOT 76
}
OVER
LDUQ 32  ; [funcId] body' ok
THROWIFNOT 60
OVER
IFNOTJMPREF {
	GETGLOB 6
	THROWIFNOT 76
}
SWAP
CALLREF {
	CALL $public_function_selector$
}
THROW 60

.internal-alias :main_external, -1
.internal :main_external
PUSHROOT
CTOS
SBITS
NEQINT 1
SETGLOB 6
OVER
CALLREF {
	CALL $c4_to_c7_with_init_storage$
}
LDU 1 ; haveSign msgSlice
SWAP
PUSHCONT {
	PUSHPOW2 9
	LDSLICEX
	DUP
	MYADDR
	NEWC
	STSLICE
	STSLICE
	ENDC
	HASHCU
	ROT
	GETGLOB 2
	DUP
	SETGLOB 5
	CHKSIGNU
	THROWIFNOT 40
}
IF
LDU 64 ; timestamp msgSlice
SWAP
CALL $replay_protection_macro$
LDU 32 ; expireAt msgSlice
SWAP
NOW ; msgSlice expireAt now
GREATER ; msgSlice expireAt>now
THROWIFNOT 57
LDU 32 ; funcId body
SWAP
CALLREF {
	CALL $public_function_selector$
}
THROW 60

.macro sum
DROP
ENDS
CALLREF {
	CALL $c4_to_c7$
}
GETGLOB 10
OVER
PUSHCONT {
	PUSHSLICE xc0000000000000000000000000c4efecec
	NEWC
	STSLICE
	STU 256
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
THROW 0

.macro public_function_selector
DUP
PUSHINT 1573411583
LEQ
IFJMPREF {
	DUP
	PUSHINT 226011322
	EQUAL
	IFJMPREF {
		CALL $getSum$
	}
	DUP
	PUSHINT 636465672
	EQUAL
	IFJMPREF {
		CALL $add$
	}
	DUP
	PUSHINT 1156574444
	EQUAL
	IFJMPREF {
		CALL $sum$
	}
	DUP
	PUSHINT 1573411583
	EQUAL
	IFJMPREF {
		CALL $reset$
	}
}
DUP
PUSHINT 1756716863
EQUAL
IFJMPREF {
	CALL $constructor$
}

